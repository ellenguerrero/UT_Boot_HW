{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 356,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 358,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reflect Tables into SQLAlchemy ORM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 359,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python SQL toolkit and Object Relational Mapper\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, inspect, func"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 360,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 361,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 362,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['measurement', 'station']"
      ]
     },
     "execution_count": 362,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can view all of the classes that automap found\n",
    "Base.classes.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 363,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save references to each table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 364,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Climate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 365,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(1, 'USC00519397', '2010-01-01', 0.08, 65.0),\n",
       " (2, 'USC00519397', '2010-01-02', 0.0, 63.0),\n",
       " (3, 'USC00519397', '2010-01-03', 0.0, 74.0),\n",
       " (4, 'USC00519397', '2010-01-04', 0.0, 76.0),\n",
       " (5, 'USC00519397', '2010-01-06', None, 73.0)]"
      ]
     },
     "execution_count": 365,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Design a query to retrieve the last 12 months of precipitation data and plot the results\n",
    "\n",
    "engine.execute('SELECT * FROM measurement LIMIT 5').fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 366,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id INTEGER\n",
      "station TEXT\n",
      "date TEXT\n",
      "prcp FLOAT\n",
      "tobs FLOAT\n"
     ]
    }
   ],
   "source": [
    "inspector = inspect(engine)\n",
    "inspector.get_table_names()\n",
    "\n",
    "\n",
    "columns = inspector.get_columns('Measurement')\n",
    "for c in columns:\n",
    "    print(c['name'], c[\"type\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 367,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('2017-08-23')"
      ]
     },
     "execution_count": 367,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the date 1 year ago from the last data point in the database\n",
    "\n",
    "session.query(Measurement.date).order_by(Measurement.date.desc()).first()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 368,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Perform a query to retrieve the data and precipitation scores\n",
    "\n",
    "measurement_results=session.query(Measurement.date, Measurement.prcp).\\\n",
    "    filter(Measurement.date > '2016-08-23').\\\n",
    "    filter(Measurement.prcp).\\\n",
    "    order_by(Measurement.date.desc()).all()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 369,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45), ('2017-08-23', 0.45)]\n",
      "-----\n",
      "[('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5), ('2017-08-22', 0.5)]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "prcp_date = [measurement_results[1] for result in measurement_results]\n",
    "prcp_amt = [measurement_results[2] for result in measurement_results]\n",
    "\n",
    "print(prcp_date)\n",
    "print (\"-----\")\n",
    "print(prcp_amt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prcp_date</th>\n",
       "      <th>prcp_amt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1141</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>1.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1136</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1137</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>2.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1140</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>2.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1139</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>1.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1138</th>\n",
       "      <td>2016-08-24</td>\n",
       "      <td>2.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1134</th>\n",
       "      <td>2016-08-25</td>\n",
       "      <td>0.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1131</th>\n",
       "      <td>2016-08-25</td>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1135</th>\n",
       "      <td>2016-08-25</td>\n",
       "      <td>0.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1133</th>\n",
       "      <td>2016-08-25</td>\n",
       "      <td>0.21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       prcp_date  prcp_amt\n",
       "1141  2016-08-24      1.45\n",
       "1136  2016-08-24      0.08\n",
       "1137  2016-08-24      2.15\n",
       "1140  2016-08-24      2.15\n",
       "1139  2016-08-24      1.22\n",
       "1138  2016-08-24      2.28\n",
       "1134  2016-08-25      0.06\n",
       "1131  2016-08-25      0.08\n",
       "1135  2016-08-25      0.11\n",
       "1133  2016-08-25      0.21"
      ]
     },
     "execution_count": 370,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Save the query results as a Pandas DataFrame and set the index to the date column\n",
    "# Sort the dataframe by date\n",
    "\n",
    "prcp_df = pd.DataFrame(measurement_results[:], columns=['prcp_date', 'prcp_amt'])\n",
    "prcp_df.set_index('prcp_date', inplace=False)\n",
    "prcp_df.sort_values(by=['prcp_date'], inplace=True)\n",
    "prcp_df.head(10)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 1142 entries, 1141 to 0\n",
      "Data columns (total 2 columns):\n",
      "prcp_date    1142 non-null object\n",
      "prcp_amt     1142 non-null float64\n",
      "dtypes: float64(1), object(1)\n",
      "memory usage: 26.8+ KB\n"
     ]
    }
   ],
   "source": [
    "prcp_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEWCAYAAABMoxE0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAHDhJREFUeJzt3XtwVOX9x/EPEoKERhckBIwEbEgEQqhBSAAxVFHAUi6lg2gdqiiCgFWsUDUKiFJoi/UCgoPlWsDpIMULSKHQxpigaKwK3sDl+kMoaOgsGhAZSH5/MCxsssnu5tmze87u+zWTmezu2XO+z9k957PPuTbweDxVAgCgni6KdgEAAGcjSAAARggSAIARggQAYIQgAQAYIUgAAEYIEgCAkYBBkpOTI5fLVePvlltuiUR9AACbSwg0QFFRkc6cOeN9fPjwYf30pz/V0KFDLS0MAOAMAYOkRYsWPo+XL1+u5ORkggQAICnEfSRVVVVavny5RowYoaSkJKtqAgA4SEhBUlRUpP3792vkyJFW1QMAcJiQgmTZsmXq2rWrunTpYlU9AACHCTpIvvnmG61fv1533HGHlfV4ud3uiEwn0mKxXbHYJol2OUkstklyTruCDpKVK1eqcePGGjZsmJX1AAAcJqggqaqq0l//+lcNGzZMycnJVtcEAHCQoIKkpKREe/bsidhmLQCAcwQ8j0SSCgoK5PF4rK4FAOBAQQUJIEmnT5/W8ePHazx/8cUX69ixY1GoyFq0K3RNmzZVQgKrlXjDJ46gnD59Wt99951cLpcaNGjg81rjxo118cUXR6ky69Cu0FRVVcnj8Sg5OZkwiTNc/RdBOX78uN8QAc5p0KCBXC6X314rYltc/WxwLTno/d8zKi2KlTgTIYJA+I7EJ3okAAAjBAkAwAhBAlhg4MCBmjx5ckjvycnJ0dy5cy2pp6SkRC6XS0ePHrVk/IhvcbWPBOF34X6nSHDKvq0VK1aEfORSUVGRz+0ZXC6Xli1bpiFDhoQ0npycHI0ZM0a/+c1vvM/l5+dr586dat68uX744YeQxgcEQpAAFzh16pQSExONx9OsWbOQ31P9JnLhlJiYqNTUVMvGj/jGpi3EtIEDB+rBBx/Uww8/rLZt26pt27aaMmWKKisrJZ399T5r1ixNmDBB6enpuueeeyRJhw4d0tixY73vueWWW7R7926fcW/cuFF9+/ZVq1atdOWVV2rEiBE6efKkd7oXbto6N50xY8YoLS1NWVlZNTZjXbhpKycnR5J0xx13yOVyeR/v3btXt912m7KysnT55ZeroKBAGzZs8GnvgQMHNGXKFLlcLrlcLkn+N2298cYb6tWrl1q2bKns7Gw9/fTTqqqq8qln9uzZmjhxotq0aaNOnTppzpw5Bp8GYhVBgpj3yiuvqLKyUps2bdJzzz2nZcuWaf78+d7X58+fr6ysLL311luaOnWqTpw4oUGDBqlx48Z68803tWnTJqWmpmrIkCE6ceKEJGnz5s361a9+peuvv15vvfWW1q5dq969e3sDyp9z0ykuLtajjz6qJ598Um+88YbfYYuKiiRJc+bM0c6dO72PKyoqdNNNN+nVV19VaWmpBg8erJEjR+rLL7+UdHaTWlpamn73u99p586d2rlzp9/xf/zxx7rzzjv185//XO+8846mTZumZ599Vi+99FKNmjt16qTi4mI98MADmjp1qt5///0g5zziBZu2EPNSU1P1pz/9SQ0aNFBWVpZ27dql+fPn67777pMk9erVSw888IB3+OXLl6uqqkrPP/+8mjRpIkl67rnn1L59e23cuFG/+MUvNHv2bA0ZMkSPP/64932dO3eus45rrrlGkyZNkiS1b99eH374oebPn6/BgwfXGPbcZq5LL73UZ5NUTk6Ot3ciSZMmTdKGDRv0+uuva/LkyWrWrJkuuugiJScn17kpa968ebr22mtVWFjorWf37t16/vnnNXbsWO9wN9xwg8aMGSNJGjt2rBYsWKDi4mLl5eXV2VbEF3okiHndunXzOVEuLy9Phw4d0rfffitJys3N9Rl+27Zt2r9/vzIyMpSWlqa0tDSlp6fL4/Fo7969kqTt27erT58+IdXRvXv3Go937NgR0jiOHz+uqVOnKj8/X23btlVaWpo++ugjffXVVyGNZ+fOncrPz/d5rmfPnj7zRZKys7N9hmnVqpW++eabkKaF2EePBHGvadOmPo8rKyuVk5OjF198UY0bN/Z5rT470cNpypQp2rx5s5566illZGQoKSlJ9957r06dOhXSeKqqqmo9C/3C5xs1alTjtQv3owASQYI48J///MdnxVlWVqbWrVvrkksu8Tv8T37yE61evVrNmzevdfNQly5dVFxcHNI9ej744IMaj6+66qpah2/UqJHOnDnj89zWrVt16623eg8JPnnypPbu3auMjAzvMImJiTXeV12HDh20detWn+feffddpaWlcfM6hIxNW4h5hw8f1iOPPCK3263XX39dc+bM0fjx42sdfvjw4WrZsqXuuOMOlZaWat++fdqyZYsee+wx75FbDz30kF577TXNmDFDO3bs0BdffKF58+Z5d8b788EHH+iZZ57R7t27tWzZMv3tb3+rs4709HQVFxfryJEj3vsBZWRkaN26dfr444/12WefacyYMTXOC0lPT9e7776rQ4cO1XoC4oQJE7RlyxbNmjVLu3bt0qpVqzRv3jzdf//9tdYD1IYgQcwbPny4Kisr1bdvX91///0aOXJknSvwpKQkrV+/Xm3bttWdd96pvLw8jRs3Th6Px3s4bb9+/bRixQpt2rRJBQUFGjhwoEpKSnTRRbUvUuPHj9dnn32mgoICzZgxQ4WFhXWebDhjxgyVlJQoOztb1113nSTp97//vVJSUvSzn/1Mw4cPV/fu3dWzZ0+f9xUWFuqrr75Sbm6uT0/lQldffbWWLl2qtWvXqmfPnpo+fbomTpzo3bEOhKKBx+Ox5QZPt9utzMzMsI7TDlf/taJdkXDs2DFdeumlfl87efKkbe/bMXDgQHXq1EmzZ88O+b3hbJe/s82jxerPq67vilWculwF4pR2sY8EiHMflfvuqM9tYX5mP+ILm7YAAEbokSCmvfnmm9EuQZL0ySefRLsEwDL0SAAARggSAICRoILk8OHDuvfee5WRkaHU1FTl5+ertLTU6tpgM5zRjED4jsSngPtIPB6P+vfvrx49emjVqlW67LLLtH//fqWkpESiPthE06ZNvedR1HZpDcS3qqoqeTwezoyPQwGDZM6cOWrVqpUWLFjgfa5du3ZW1gQbSkhIUHJyss8F/c759ttva73ciJPFS7vK/s/3bPwfN0qq/pagJScnh3xnSDhfwBMS8/Pz1bdvX/33v/9VSUmJWrVqpV//+te655576vxl6na7w16sqe6l5xeQst61X8oCiCcXLhcSywb8q+vEyIA/Hfbt26dFixZp/Pjxmjhxoj755BM9/PDDklTn5RRMz8a05IzO0vNntkfrbFGnnKkailhskxRH7bpguZCit2yYiJvPyqYCBkllZaVyc3M1bdo0SWevjLpnzx4tXLiQ6/IAAAIftZWa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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use Pandas Plotting with Matplotlib to plot the data\n",
    "\n",
    "#plt.figure()\n",
    "fig, ax = plt.subplots()\n",
    "plt.bar(prcp_df[\"prcp_date\"], prcp_df[\"prcp_amt\"],width=3)\n",
    "plt.grid(True)\n",
    "plt.xscale('linear')\n",
    "plt.xlabel(\"date\")\n",
    "ax.set_xticklabels([])\n",
    "plt.yticks([0,1,2,3,4,5,6,7])\n",
    "plt.ylim(ymax=7)\n",
    "plt.legend(['precipitation'],loc=9)\n",
    "\n",
    "\n",
    "#ax.axis()\n",
    "#ax.grid(True)\n",
    "\n",
    "plt.show()\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![precipitation](Images/precipitation.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prcp_amt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1142.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.311357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.576134</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.010000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.030000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.310000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          prcp_amt\n",
       "count  1142.000000\n",
       "mean      0.311357\n",
       "std       0.576134\n",
       "min       0.010000\n",
       "25%       0.030000\n",
       "50%       0.100000\n",
       "75%       0.310000\n",
       "max       6.700000"
      ]
     },
     "execution_count": 373,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use Pandas to calcualte the summary statistics for the precipitation data\n",
    "prcp_df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id INTEGER\n",
      "station TEXT\n",
      "name TEXT\n",
      "latitude FLOAT\n",
      "longitude FLOAT\n",
      "elevation FLOAT\n"
     ]
    }
   ],
   "source": [
    "inspector = inspect(engine)\n",
    "inspector.get_table_names()\n",
    "\n",
    "\n",
    "station_columns = inspector.get_columns('Station')\n",
    "for station_col in station_columns:\n",
    "    print(station_col['name'], station_col[\"type\"])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 375,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(9)]"
      ]
     },
     "execution_count": 375,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Design a query to show how many stations are available in this dataset?\n",
    "session.query(func.count(Station.id)).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00511918', 1979),\n",
       " ('USC00513117', 2709),\n",
       " ('USC00514830', 2202),\n",
       " ('USC00516128', 2612),\n",
       " ('USC00517948', 1372),\n",
       " ('USC00518838', 511),\n",
       " ('USC00519281', 2772),\n",
       " ('USC00519397', 2724),\n",
       " ('USC00519523', 2669)]"
      ]
     },
     "execution_count": 376,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#how many times each station appears\n",
    "session.query(Measurement.station,(func.count(Measurement.station))).group_by(Measurement.station).all()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 377,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00519281', 2772),\n",
       " ('USC00519397', 2724),\n",
       " ('USC00513117', 2709),\n",
       " ('USC00519523', 2669),\n",
       " ('USC00516128', 2612),\n",
       " ('USC00514830', 2202),\n",
       " ('USC00511918', 1979),\n",
       " ('USC00517948', 1372),\n",
       " ('USC00518838', 511)]"
      ]
     },
     "execution_count": 377,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What are the most active stations? (i.e. what stations have the most rows)?\n",
    "# List the stations and the counts in descending order.\n",
    "\n",
    "session.query(Measurement.station,(func.count(Measurement.station))).group_by(Measurement.station)\\\n",
    "    .order_by((func.count(Measurement.station).desc())).all()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Which station has the highest number of observations?\n",
    "\n",
    "#### WAIHEE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 379,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(54.0, 85.0, 71.66378066378067)]\n"
     ]
    }
   ],
   "source": [
    "# Using the station id from the previous query, calculate the lowest temperature recorded, \n",
    "# highest temperature recorded, and average temperature most active station?\n",
    "\n",
    "waihee=session.query(func.min(Measurement.tobs), func.max(Measurement.tobs), func.avg(Measurement.tobs)).\\\n",
    "    filter(Measurement.station =='USC00519281').all()\n",
    "print(waihee)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_data=session.query(Measurement.date, Measurement.station, Measurement.tobs).\\\n",
    "    filter(Measurement.date > '2016-08-23').\\\n",
    "    filter(Measurement.station=='USC00519281').\\\n",
    "    filter(Measurement.tobs).\\\n",
    "    order_by(Measurement.date.desc()).all()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 381,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>msmt_date</th>\n",
       "      <th>msmt_station</th>\n",
       "      <th>msmt_temp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2017-08-18</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>79.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2017-08-17</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2017-08-16</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2017-08-15</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2017-08-14</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2017-08-13</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2017-08-06</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2017-08-05</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>82.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2017-08-04</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2017-07-31</td>\n",
       "      <td>USC00519281</td>\n",
       "      <td>76.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    msmt_date msmt_station  msmt_temp\n",
       "0  2017-08-18  USC00519281       79.0\n",
       "1  2017-08-17  USC00519281       76.0\n",
       "2  2017-08-16  USC00519281       76.0\n",
       "3  2017-08-15  USC00519281       77.0\n",
       "4  2017-08-14  USC00519281       77.0\n",
       "5  2017-08-13  USC00519281       77.0\n",
       "6  2017-08-06  USC00519281       83.0\n",
       "7  2017-08-05  USC00519281       82.0\n",
       "8  2017-08-04  USC00519281       77.0\n",
       "9  2017-07-31  USC00519281       76.0"
      ]
     },
     "execution_count": 381,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_df = pd.DataFrame(temp_data[:], columns=[\"msmt_date\",\"msmt_station\", \"msmt_temp\"])\n",
    "temp_df.set_index('msmt_date', inplace=False)\n",
    "temp_df.sort_values(by=['msmt_date'])\n",
    "temp_df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 382,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<function matplotlib.pyplot.show(*args, **kw)>"
      ]
     },
     "execution_count": 382,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Choose the station with the highest number of temperature observations.\n",
    "# Query the last 12 months of temperature observation data for this station and plot the results as a histogram\n",
    "\n",
    "\n",
    "hist = temp_df.hist(bins=12)\n",
    "plt.legend(['tobs'],loc=1)\n",
    "plt.ylabel(\"Frequency\")\n",
    "plt.title(\"\")\n",
    "\n",
    "plt.show"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![precipitation](Images/station-histogram.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 383,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(60.0, 70.1590909090909, 75.0)]\n"
     ]
    }
   ],
   "source": [
    "# This function called `calc_temps` will accept start date and end date in the format '%Y-%m-%d' \n",
    "# and return the minimum, average, and maximum temperatures for that range of dates\n",
    "def calc_temps(start_date, end_date):\n",
    "    \"\"\"TMIN, TAVG, and TMAX for a list of dates.\n",
    "    \n",
    "    Args:\n",
    "        start_date (string): A date string in the format %Y-%m-%d\n",
    "        end_date (string): A date string in the format %Y-%m-%d\n",
    "        \n",
    "    Returns:\n",
    "        TMIN, TAVE, and TMAX\n",
    "    \"\"\"\n",
    "    \n",
    "    return session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "        filter(Measurement.date >= start_date).filter(Measurement.date <= end_date).all()\n",
    "\n",
    "# function usage example\n",
    "print(calc_temps('2013-02-28', '2013-03-05'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 384,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(70.0, 74.98181818181818, 82.0)]\n"
     ]
    }
   ],
   "source": [
    "# Use your previous function `calc_temps` to calculate the tmin, tavg, and tmax \n",
    "# for your trip using the previous year's data for those same dates.\n",
    "\n",
    "print(calc_temps('2012-07-04', '2012-07-18'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a2acdba748>"
      ]
     },
     "execution_count": 385,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the results from your previous query as a bar chart. \n",
    "# Use \"Trip Avg Temp\" as your Title\n",
    "# Use the average temperature for the y value\n",
    "# Use the peak-to-peak (tmax-tmin) value as the y error bar (yerr)\n",
    "\n",
    "\n",
    "trip_df=pd.DataFrame(calc_temps('2013-07-04', '2013-07-18'), columns=[\"min\", \"avg\", \"max\"])\n",
    "trip_df.head(10)\n",
    "\n",
    "yer=trip_df['max']-trip_df['min']\n",
    "\n",
    "trip_df.plot(y='avg', kind='bar', title=\"Trip Avg Temp\", yerr=yer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sqlalchemy.orm.attributes.InstrumentedAttribute"
      ]
     },
     "execution_count": 444,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(Measurement.date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 499,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('USC00516128', 0.17),\n",
       " ('USC00519281', 0.03),\n",
       " ('USC00519523', 0.03),\n",
       " ('USC00511918', 0.0),\n",
       " ('USC00513117', 0.0),\n",
       " ('USC00514830', 0.0),\n",
       " ('USC00517948', 0.0),\n",
       " ('USC00519397', 0.0)]"
      ]
     },
     "execution_count": 499,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def vac_temps(start_date, end_date):\n",
    "    \n",
    "    return session.query(Measurement.station, (func.sum(Measurement.prcp))).group_by(Measurement.station).\\\n",
    "        filter(Measurement.date >= start_date).filter(Measurement.date <= end_date)\\\n",
    "        .order_by((func.sum(Measurement.prcp).desc())).all()\n",
    "\n",
    "\n",
    "vacay=vac_temps('2013-02-28', '2013-03-05')\n",
    "vacay\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 577,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('USC00516128', 'MANOA LYON ARBO 785.2, HI US', 1068.0899999999997, 21.3331, -157.8025, 152.4)\n",
      "('USC00519281', 'WAIHEE 837.5, HI US', 588.6400000000001, 21.45167, -157.84888999999998, 32.9)\n",
      "('USC00513117', 'KANEOHE 838.1, HI US', 382.6199999999998, 21.4234, -157.8015, 14.6)\n",
      "('USC00519523', 'WAIMANALO EXPERIMENTAL FARM, HI US', 295.6800000000001, 21.33556, -157.71139, 19.5)\n",
      "('USC00514830', 'KUALOA RANCH HEADQUARTERS 886.9, HI US', 234.49000000000007, 21.5213, -157.8374, 7.0)\n",
      "('USC00519397', 'WAIKIKI 717.2, HI US', 131.61999999999992, 21.2716, -157.8168, 3.0)\n",
      "('USC00511918', 'HONOLULU OBSERVATORY 702.2, HI US', 92.67999999999995, 21.3152, -157.9992, 0.9)\n",
      "('USC00518838', 'UPPER WAHIAWA 874.3, HI US', 70.86999999999999, 21.4992, -158.0111, 306.6)\n",
      "('USC00517948', 'PEARL CITY, HI US', 43.43999999999998, 21.3934, -157.9751, 11.9)\n"
     ]
    }
   ],
   "source": [
    "# Calculate the rainfall per weather station for your trip dates using the previous year's matching dates.\n",
    "# Sort this in descending order by precipitation amount and list the station, name, latitude, longitude, and elevation\n",
    "\n",
    "sel = [Station.station,\n",
    "       Station.name,\n",
    "       func.sum(Measurement.prcp), \n",
    "       Station.latitude, \n",
    "       Station.longitude, \n",
    "       Station.elevation]\n",
    "rains = session.query(*sel).\\\n",
    "filter(Measurement.station== Station.station).group_by(Measurement.station).\\\n",
    "order_by((func.sum(Measurement.prcp).desc())).all()\n",
    "\n",
    "print(*rains, sep='\\n')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## following portion is bonus -- did not complete at this time.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optional Challenge Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a query that will calculate the daily normals \n",
    "# (i.e. the averages for tmin, tmax, and tavg for all historic data matching a specific month and day)\n",
    "\n",
    "def daily_normals(date):\n",
    "    \"\"\"Daily Normals.\n",
    "    \n",
    "    Args:\n",
    "        date (str): A date string in the format '%m-%d'\n",
    "        \n",
    "    Returns:\n",
    "        A list of tuples containing the daily normals, tmin, tavg, and tmax\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    sel = [func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)]\n",
    "    return session.query(*sel).filter(func.strftime(\"%m-%d\", Measurement.date) == date).all()\n",
    "    \n",
    "daily_normals(\"01-01\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the daily normals for your trip\n",
    "# push each tuple of calculations into a list called `normals`\n",
    "\n",
    "# Set the start and end date of the trip\n",
    "\n",
    "# Use the start and end date to create a range of dates\n",
    "\n",
    "# Stip off the year and save a list of %m-%d strings\n",
    "\n",
    "# Loop through the list of %m-%d strings and calculate the normals for each date\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the previous query results into a Pandas DataFrame and add the `trip_dates` range as the `date` index\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the daily normals as an area plot with `stacked=False`\n"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  },
  "nteract": {
   "version": "0.9.1"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
